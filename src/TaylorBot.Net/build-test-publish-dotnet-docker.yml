parameters:
  - name: componentName
    default: ''
  - name: dockerfilePath
    default: ''
  - name: dockerBuildContext
    default: ''


stages:
  - stage: build
    displayName: 'Build container image'
    variables:
      containerImageTag: 'taylorbot/${{ parameters.componentName }}:$(Build.SourceVersion)'
      containerImageFilePath: '$(Build.ArtifactStagingDirectory)/${{ parameters.componentName }}.tar'
      testImageTag: 'taylorbot/${{ parameters.componentName }}-tests'
      testResultsPath: '$(Build.ArtifactStagingDirectory)/TestResults'
    jobs:
    - job: build
      displayName: 'Run tests and build container image'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: Docker@2
        displayName: 'Build test container image'
        inputs:
          command: build
          dockerfile: ${{ parameters.dockerfilePath }}
          buildContext: ${{ parameters.dockerBuildContext }}
          arguments: '--target test --tag $(testImageTag) --build-arg FEED_ACCESS_TOKEN=$(taylorbot_feed_access_token)'

      - script: docker run --rm --volume $(testResultsPath):/TestResults $(testImageTag) --verbosity normal
        displayName: 'Run tests'

      - task: Docker@2
        displayName: 'Build final container image'
        inputs:
          command: build
          dockerfile: ${{ parameters.dockerfilePath }}
          buildContext: ${{ parameters.dockerBuildContext }}
          arguments: '--tag $(containerImageTag) --build-arg FEED_ACCESS_TOKEN=$(taylorbot_feed_access_token)'

      - task: PublishTestResults@2
        displayName: 'Publish tests results'
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: $(testResultsPath)

      - task: PublishCodeCoverageResults@2
        displayName: 'Publish code coverage report'
        inputs:
          summaryFileLocation: '$(testResultsPath)/*/coverage.cobertura.xml'
          pathToSources: ${{ parameters.dockerBuildContext }}

      - script: docker save --output $(containerImageFilePath) $(containerImageTag)
        displayName: 'Save container image to file'

      - publish: $(containerImageFilePath)
        artifact: '${{ parameters.componentName }}-image'
        displayName: 'Publish built container image'

  - stage: deploy
    displayName: 'TaylorBot'
    dependsOn: build
    condition: and(succeeded(), and(eq(variables['Build.Reason'], 'Manual'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
    variables:
      artifactName: '${{ parameters.componentName }}-image'
      archiveName: '${{ parameters.componentName }}.tar'
    jobs:
      - deployment: deploy_component
        displayName: 'Deploy to virtual machine'
        environment:
          name: taylorbot
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
              - download: current
                artifact: $(artifactName)
              # This assumes we have set up a remote virtual machine resource with the repository cloned in home folder
              - script: |
                  set -o errexit
                  set -o pipefail
                  set -o nounset

                  deploy_folder=~/TaylorBot/src/linux-infrastructure/dotnet/${{ parameters.componentName }}

                  echo 'Moving $(archiveName) to deploy folder'
                  rm -f ${deploy_folder}/$(archiveName).bak
                  mv ${deploy_folder}/$(archiveName) ${deploy_folder}/$(archiveName).bak
                  mv $(Pipeline.Workspace)/$(artifactName)/$(archiveName) ${deploy_folder}/$(archiveName)

                  cd ${deploy_folder}
                  docker rm -f taylorbot-${{ parameters.componentName }} &>/dev/null && echo 'Removed previous container'
                  chmod +x ./deploy-${{ parameters.componentName }}.sh
                  ./deploy-${{ parameters.componentName }}.sh
                displayName: 'Deploy image and start container'
