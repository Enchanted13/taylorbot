trigger:
  - master
  
resources:
- repo: self

variables:
  dockerfilePath: '$(Build.SourcesDirectory)/src/TaylorBot.Net/Program.StatsTracker/Dockerfile'
  dockerBuildContext: '$(Build.SourcesDirectory)/src/TaylorBot.Net'
  testImageTag: 'taylorbot/stats-tracker-tests'
  testResultsPath: '$(Build.ArtifactStagingDirectory)/TestResults'
  containerImageTag: 'taylorbot/stats-tracker:$(Build.SourceVersion)'
  containerImageFilePath: '$(Build.ArtifactStagingDirectory)/stats-tracker.tar'

stages:
- stage: build
  displayName: 'Build container image'
  jobs:  
  - job: build
    displayName: 'Run tests and build container image'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build test container image'
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        buildContext: $(dockerBuildContext)
        arguments: '--pull --target test --tag $(testImageTag)'

    - task: BuildQualityChecks@7
      displayName: 'Check warnings in build'
      continueOnError: true
      inputs:
        checkWarnings: true
        warningFailOption: fixed
        warningTaskFilters: '/^Build test container image$/'
        warningFilters: '/(\d+)\sWarning\(s\)/i'

    - script: docker run --rm --volume $(testResultsPath):/TestResults $(testImageTag)
      displayName: 'Run tests'

    - task: Docker@2
      displayName: 'Build final container image'
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        buildContext: $(dockerBuildContext)
        arguments: '--pull --tag $(containerImageTag)'

    - task: PublishTestResults@2
      displayName: 'Publish tests results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '*.trx'
        searchFolder: $(testResultsPath)

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(testResultsPath)/**/coverage.cobertura.xml'
        pathToSources: $(dockerBuildContext)

    - script: docker save --output $(containerImageFilePath) $(containerImageTag)
      displayName: 'Save container image to file'

    - publish: $(containerImageFilePath)
      artifact: 'Docker Image'
      displayName: 'Publish built container image'
